@using MaterialDesign.Color.Colorspaces
@using System.Diagnostics.CodeAnalysis
@using MaterialDesign.Color.Palettes

<div class="Scheme">
    @if (Name is not null)
    {
        <h2>
            @Name
            @if (Score is not null)
            {
                @($"- Score: {Score}")
            }
        </h2>
    }
    <div class="Palette">
        Primary
        @foreach (double tone in Tones)
        {
            string hex = new Color(Palette.Primary.GetWithTone(tone).ToRGBA() as IRGB).ToHexString();
            <div class="TonePreview" style="background: @hex">@tone - @hex</div>
        }
    </div>
    <div class="Palette">
        Secondary
        @foreach (double tone in Tones)
        {
            string hex = new Color(Palette.Secondary.GetWithTone(tone).ToRGBA() as IRGB).ToHexString();
            <div class="TonePreview" style="background: @hex">@tone - @hex</div>
        }
    </div>
    <div class="Palette">
        Tertiary
        @foreach (double tone in Tones)
        {
            string hex = new Color(Palette.Tertiary.GetWithTone(tone).ToRGBA() as IRGB).ToHexString();
            <div class="TonePreview" style="background: @hex">@tone - @hex</div>
        }
    </div>
    <div class="Palette">
        Neutral
        @foreach (double tone in Tones)
        {
            string hex = new Color(Palette.Neutral.GetWithTone(tone).ToRGBA() as IRGB).ToHexString();
            <div class="TonePreview" style="background: @hex">@tone - @hex</div>
        }
    </div>
    <div class="Palette">
        Neutral Variant
        @foreach (double tone in Tones)
        {
            string hex = new Color(Palette.NeutralVariant.GetWithTone(tone).ToRGBA() as IRGB).ToHexString();
            <div class="TonePreview" style="background: @hex">@tone - @hex</div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired, NotNull]
    public double[]? Tones { get; set; }

    [Parameter, EditorRequired]
    public CorePalette Palette { get; set; }
    
    [Parameter] 
    public string? Name { get; set; }
    
    [Parameter] 
    public int? Score { get; set; }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(Tones);
        ArgumentNullException.ThrowIfNull(Palette);
    }
}