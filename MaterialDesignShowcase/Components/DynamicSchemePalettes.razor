@using MaterialDesign.Schemes
@using MaterialDesign.Colorspaces
@using System.Diagnostics.CodeAnalysis

<div class="Scheme">
    <h2>@Scheme.Variant.ToString(), @(Scheme.IsDark ? "Dark" : "Light")</h2>
    <div class="Palette">
        Primary
        @foreach (double tone in Tones)
        {
            string hex = new Color(Scheme.Primary.GetWithTone(tone).ToRGBA() as IRGB).ToHexString();
            <div class="TonePreview" style="background: @hex">@tone - @hex</div>
        }
    </div>
    <div class="Palette">
        Secondary
        @foreach (double tone in Tones)
        {
            string hex = new Color(Scheme.Secondary.GetWithTone(tone).ToRGBA() as IRGB).ToHexString();
            <div class="TonePreview" style="background: @hex">@tone - @hex</div>
        }
    </div>
    <div class="Palette">
        Tertiary
        @foreach (double tone in Tones)
        {
            string hex = new Color(Scheme.Tertiary.GetWithTone(tone).ToRGBA() as IRGB).ToHexString();
            <div class="TonePreview" style="background: @hex">@tone - @hex</div>
        }
    </div>
    <div class="Palette">
        Neutral
        @foreach (double tone in Tones)
        {
            string hex = new Color(Scheme.Neutral.GetWithTone(tone).ToRGBA() as IRGB).ToHexString();
            <div class="TonePreview" style="background: @hex">@tone - @hex</div>
        }
    </div>
    <div class="Palette">
        Neutral Variant
        @foreach (double tone in Tones)
        {
            string hex = new Color(Scheme.NeutralVariant.GetWithTone(tone).ToRGBA() as IRGB).ToHexString();
            <div class="TonePreview" style="background: @hex">@tone - @hex</div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired, NotNull]
    public double[]? Tones { get; set; }

    [Parameter, EditorRequired, NotNull]
    public DynamicScheme? Scheme { get; set; }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(Tones);
        ArgumentNullException.ThrowIfNull(Scheme);
    }
}