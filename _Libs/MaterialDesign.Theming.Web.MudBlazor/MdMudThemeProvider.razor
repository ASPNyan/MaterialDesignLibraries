@using global::MudBlazor
@using global::MudBlazor.Utilities
@using MaterialDesign.Color.Colorspaces
@using MaterialDesign.Theming.Injection
@inject ThemeContainer ThemeContainer

<MudThemeProvider Theme="@GetMudTheme()"/>

@code {
    private IScheme MdTheme => ThemeContainer.Scheme;

    private static MudColor MudColor(HCTA hcta)
    {
        RGBA rgba = hcta.ToRGBA();
        return new MudColor(rgba.R, rgba.G, rgba.B, rgba.A);
    }
    
    private MudTheme GetMudTheme()
    {
        PaletteLight palette = new()
        {
            Primary = MudColor(MdTheme.Primary),
            TextPrimary = MudColor(MdTheme.OnPrimary),
            Secondary = MudColor(MdTheme.Secondary),
            TextSecondary = MudColor(MdTheme.OnSecondary),
            Tertiary = MudColor(MdTheme.Tertiary),
            Error = MudColor(MdTheme.Error),
            Background = MudColor(MdTheme.Background),
            Surface = MudColor(MdTheme.Surface),
        };

        return new MudTheme
        {
            Palette = palette,
            PaletteDark = palette
        }; // these are the same because the ThemeContainer will handle the coloring itself on rerender.
    }
    
    private async void OnThemeUpdate() => await InvokeAsync(StateHasChanged);

    protected override void OnInitialized()
    {
        ThemeContainer.OnSchemeUpdate += OnThemeUpdate;
    }
}