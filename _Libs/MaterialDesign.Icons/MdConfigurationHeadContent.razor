@using MaterialDesign.Web.Components
@using MaterialDesign.Web.Fonts
@inject MdIconConfiguration IconConfig

@for (int i = 0; i < 3; i++)
{
    MdIconLineStyle style = (MdIconLineStyle)i;
    @if (UrlGenerator is null)
    {
        <link rel="stylesheet" href="@GenerateMaterialIconsUrl(style)">
    }
    else
    {
        <DynamicFont FontFaceBuilder="@(builder => BuildFontFace(builder, style))"/>
    }
}

@if (UrlGenerator is not null)
{
<style>
    .material-symbols-outlined, .material-symbols-rounded, .material-symbols-sharp {
        font-weight: normal;
        font-style: normal;
        font-size: 24px;
        line-height: 1;
        letter-spacing: normal;
        text-transform: none;
        display: inline-block;
        white-space: nowrap;
        word-wrap: normal;
        direction: ltr;
        -moz-font-feature-settings: 'liga';
        -moz-osx-font-smoothing: grayscale;
    }
</style>
}

@code {
    [Parameter]
    public MaterialIconConfigExtensions.UrlGenerator? UrlGenerator { get; set; }

    private string GenerateMaterialIconsUrl(MdIconLineStyle style)
        => $"https://fonts.googleapis.com/css2?family=Material+Symbols+{style.ToString()}" +
           $"{IconConfig?.GetFontConfigurationString()}";
    
    private void BuildFontFace(FontFaceBuilder builder, MdIconLineStyle style)
    {
        string fontFamily = $"Material Symbols {style}".ToLowerInvariant();

        builder.FontFamily(fontFamily)
            .FontSource(fsBuilder => fsBuilder.AddUrlSource(UrlGenerator!(style)))
            .FontWeight(IconConfig.IsStatic ? new FontWeight(IconConfig.Weight) : new FontWeight(100, 700));
    }

}