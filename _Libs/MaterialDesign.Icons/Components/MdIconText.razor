@using MaterialDesign.Web.Exceptions
@inherits MdIcon

@if (Href is null)
{
    <span class="@(@class)" style="display: flex; align-items: center; @style" @attributes="@UnmatchedParameters">
        <span class="material-symbols-@LineStyleString" style="@IconStyleString">
            @GetIcon
        </span>
        <span style="font-size: @(Scale)em;">
            @Text
        </span>
    </span>
}
else
{
    <a href="@Href" class="@(@class)" style="display: flex; align-items: center; @style" @attributes="@UnmatchedParameters">
        <span class="material-symbols-@LineStyleString" style="@IconStyleString">
            @GetIcon
        </span>
        <span style="font-size: @(Scale)em;">
            @Text
        </span>
    </a>
}

@code {
    /// <summary>
    /// The text that is put after the icon. If not provided, the component will throw an exception.
    /// </summary>
    [Parameter, EditorRequired]
    public string? Text { get; set; }

    [Parameter]
    public string? IconStyle { get; set; }

    private new string IconStyleString => base.IconStyleString[..^(style?.Length ?? 0)] + IconStyle; // remove style from end.

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(Text)) 
        {
            throw new ParameterException(
                $"Icons with text must have a valid string provided to the `{nameof(Text)}` parameter",
                nameof(Text));
        }
        
        base.OnInitialized();
    }
}