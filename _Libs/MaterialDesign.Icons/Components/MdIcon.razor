@using MaterialDesign.Web.Exceptions
@inherits MdIconConfigComponent

@if (string.IsNullOrWhiteSpace(Href))
{
    <span class="@(@class) material-symbols-@LineStyleString" style="@IconStyleString" @attributes="@UnmatchedParameters">
        @GetIcon
    </span>
}
else
{
    <a href="@Href" class="@(@class) material-symbols-@LineStyleString" style="@IconStyleString" @attributes="@UnmatchedParameters">
        @GetIcon
    </a>
}

@code {
    /// <summary>
    /// The name of the material icon, found at https://fonts.google.com/icons. Throws an exception when not supplied.
    /// </summary>
    [Parameter, EditorRequired]
    public string? Icon { get; set; }

    protected string GetIcon => Icon!.Trim().ToLowerInvariant().Replace(' ', '_'); // "More Horiz" => "more_horiz"
    
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? UnmatchedParameters { get; set; }
    
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// The scale of the Icon, applied as a multiplier.
    /// </summary>
    [Parameter] public double Scale { get; set; } = 1;
    // ReSharper disable once SimplifyStringInterpolation | this dies in blazor (like raw strings)
    private string FontSize => $"font-size: {(24 * Scale).ToString("N3")}px;";

    /// <summary>
    /// Modifies the CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/user-select">user-select</a> property
    /// on the Icon to disable text highlighting when false, and enable it when true. False by default.
    /// </summary>
    [Parameter] public bool UserSelect { get; set; }
    private string UserSelectString => $"user-select: {(UserSelect ? "text" : "none")};";
    
    /// <summary>
    /// The href to set the anchor to. Leave empty if this shouldn't be a link
    /// </summary>
    [Parameter]
    public string? Href { get; set; }

    // ReSharper disable InconsistentNaming | Give parameter catches in order to not override icon settings
    [Parameter] public string? @class { get; set; }
    [Parameter] public string? style { get; set; }
    // ReSharper restore InconsistentNaming

    protected string LineStyleString
        => (LineStyle ?? CascadingIconConfig?.LineStyle ?? MdIconLineStyle.Outlined).ToString().ToLowerInvariant();
    
    protected string IconStyleString => FontSize + UserSelectString + StyleRuleString + style;

    protected override void OnInitialized()
    {
        if (Icon is null) throw new ArgumentNullException(nameof(Icon), 
            $"Icons must have a valid name provided to the `{nameof(Icon)}` parameter");
        
        if (ChildContent is not null) throw VoidElementException.ChildContentIsDisallowed<MdIcon>();
    }
}