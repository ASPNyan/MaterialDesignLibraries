@using MaterialDesign.Web.Exceptions
@using MaterialDesign.Web.Fonts
@using Microsoft.Extensions.DependencyInjection
@implements IDisposable
@inject IServiceProvider ServiceProvider

@if (RenderIndividually)
{
    <DynamicHeadContent>
        <style>
            @if (FontFace is not null)
            {
                @FontFace.Value.ToMarkupString()
            }
            else
            {
                FontFaceBuilder builder = new();
                FontFaceBuilder!(builder);
                @builder.Build().ToMarkupString()
            }
            
            @FormattedClassName {
                font-family: "@FontFamily";
            }
        </style>
    </DynamicHeadContent>
}

@code {
    /// <summary>
    /// A <see cref="Fonts.FontFace"/>, created previously.
    /// </summary>
    [Parameter]
    public FontFace? FontFace { get; set; }
    
    /// <summary>
    /// A method receiving a <see cref="Fonts.FontFaceBuilder"/> that builds a
    /// <see cref="Fonts.FontFace"/>.
    /// </summary>
    [Parameter]
    public Action<FontFaceBuilder>? FontFaceBuilder { get; set; }
    
    /// <summary>
    /// Defaults to the font's display-name. Spaces are replaced with hyphens (<c>-</c>).
    /// </summary>
    [Parameter] 
    public string? ClassName { get; set; }

    private string FormattedClassName
    {
        get
        {
            if (FontFace is not null) 
                return (ClassName ?? FontFace.Value.Family).Replace(' ', '-').Replace('"', '\u0000');
            
            FontFaceBuilder builder = new();
            FontFaceBuilder!(builder);
            return (ClassName ?? builder.Build().Family).Replace(' ', '-').Replace('"', '\u0000');
        }
    }

    private string FontFamily
    {
        get
        {
            if (FontFace is not null) return FontFace.Value.Family;
            
            FontFaceBuilder builder = new();
            FontFaceBuilder!(builder);
            return builder.Build().Family;
        }
    }

    private bool RenderIndividually { get; set; }

    private FontFaceCollection? FontFaceCollection { get; set; }
    
    protected override void OnInitialized()
    {
        if (FontFace is null && FontFaceBuilder is null)
        {
            throw new ParameterException("Either a FontFace or FontFaceBuilder method must be provided to the " +
                                         "Font component.", "FontFace and FontFaceBuilder");
        }

        FontFaceCollection = ServiceProvider.GetService<FontFaceCollection>();
        
        RenderIndividually = FontFaceCollection is null;
        
        if (FontFaceCollection is not null)
        {
            if (FontFace is not null) FontFaceCollection.Add(FormattedClassName, FontFace.Value);
            else
            {
                FontFaceBuilder builder = new();
                FontFaceBuilder!(builder);
                FontFaceCollection.Add(FormattedClassName, builder.Build());
            }
        }
    }

    public void Dispose()
    {
        if (FontFaceCollection is not null)
        {
            if (FontFace is not null) FontFaceCollection.Remove(FormattedClassName, FontFace.Value);
            else
            {
                FontFaceBuilder builder = new();
                FontFaceBuilder!(builder);
                FontFaceCollection.Remove(FormattedClassName, builder.Build());
            }
        }
    }
}