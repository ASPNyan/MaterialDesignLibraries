@implements IDynamicIdComponentOutlet
@implements IDisposable

@_renderContent

@if (ExtraSources is not null)
{
    foreach ((Type type, IDictionary<string, object>? attributes) in ExtraSources)
    {
        <DynamicComponent Type="@type" Parameters="@attributes"/>
    }
}

@code
{
    private static List<string> ExistingOutlets { get; } = [];
    public static bool OutletExistsWithId(string id) => ExistingOutlets.Contains(id);

    [Parameter, EditorRequired] 
    public virtual string Id { get; set; } = null!;
    
    [Parameter]
    public List<(Type ComponentType, IDictionary<string, object>? Attributes)>? ExtraSources { get; set; }

    private static readonly Dictionary<string, List<(Type ComponentType, IDictionary<string, object>? Attributes)>> StaticExtraSources = [];

    public static void AddComponentSourceWithId<TComponent>(string id, IDictionary<string, object>? attributes = null)
    {
        (Type ComponentType, IDictionary<string, object>? Attributes) valuePair = (typeof(TComponent), attributes);
        if (StaticExtraSources.TryGetValue(id, out var list)) list.Add(valuePair);
        else StaticExtraSources[id] = [valuePair];
    }

    private RenderFragment? _renderContent;

    protected override void OnInitialized()
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(Id);
        DynamicComponentContent.OnChangeWithOutletId += OnChange;
        ExistingOutlets.Add(Id);
        if (StaticExtraSources.TryGetValue(Id, out var list)) ExtraSources?.AddRange(list);
    }

    private async void OnChange(string id)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(Id);
        await InvokeAsync(() =>
        {
            _renderContent = builder =>
            {
                List<RenderFragment>? fragments = DynamicComponentContent.GetContentWithOutletId(Id);
                if (fragments is null) return;
                for (int i = 0; i < fragments.Count; i++) builder.AddContent(i, fragments[i]);
            };
            
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ArgumentException.ThrowIfNullOrEmpty(Id);
        DynamicComponentContent.OnChangeWithOutletId -= OnChange;
        ExistingOutlets.Remove(Id);
    }
}