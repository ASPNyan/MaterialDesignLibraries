@using MaterialDesign.Web.Services
@implements IDisposable
@inject DynamicComponentStorage Storage

@code
{
    /// <summary>
    /// The id correlated with the outlet that will be used to display the provided child content.
    /// </summary>
    [Parameter, EditorRequired]
    public string OutletId { get; set; } = null!;
    
    [Parameter, EditorRequired]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(OutletId);
        ArgumentNullException.ThrowIfNull(ChildContent);

        if (ChildContent is not null)
        {
            Storage.UpdateContentAtId(OutletId, ChildContent);
        }
    }

    protected override void OnAfterRender(bool firstRender) => Storage.InvokeUpdate(OutletId);

    public void Dispose()
    {
        if (string.IsNullOrWhiteSpace(OutletId) || ChildContent is null) return;
        Storage.RemoveFromId(OutletId, ChildContent);
    }
}