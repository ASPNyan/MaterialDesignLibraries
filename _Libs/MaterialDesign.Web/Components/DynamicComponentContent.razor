@using MaterialDesign.Web.Exceptions
@using MaterialDesign.Web.Services
@implements IDisposable
@inject DynamicComponentStorage Storage

@code
{
    [Parameter, EditorRequired] 
    public string OutletId { get; set; } = null!;
    
    [Parameter, EditorRequired]
    public RenderFragment? ChildContent { get; set; }

    [Parameter] 
    public bool AssureOutletExists { get; set; }

    protected override void OnInitialized()
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(OutletId);
        ArgumentNullException.ThrowIfNull(ChildContent);

        if (!DynamicComponentOutlet.OutletExistsWithId(OutletId) && !AssureOutletExists)
        {
            throw new ComponentException($"Outlet for outlet id `{OutletId}` does not exist. If this is a " +
                                         $"false positive, set the `AssureOutletExists` attribute to true.");
        }

        if (ChildContent is not null)
        {
            Storage.UpdateContentAtId(OutletId, ChildContent);
        }
    }

    public void Dispose()
    {
        if (string.IsNullOrWhiteSpace(OutletId) || ChildContent is null) return;
        Storage.RemoveFromId(OutletId, ChildContent);
    }
}