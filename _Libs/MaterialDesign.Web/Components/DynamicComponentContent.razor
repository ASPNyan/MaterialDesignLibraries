@implements IDynamicIdComponentContent
@using MaterialDesign.Web.Exceptions
@implements IDisposable

@code
{
    private static Dictionary<string, List<RenderFragment>> ContentPerId { get; } = [];

    public static event Action<string>? OnChangeWithOutletId;

    public static List<RenderFragment>? GetContentWithOutletId(string id)
    {
        ContentPerId.TryGetValue(id, out List<RenderFragment>? fragments);
        return fragments;
    }

    [Parameter, EditorRequired] 
    public string OutletId { get; set; } = null!;
    
    [Parameter, EditorRequired]
    public RenderFragment? ChildContent { get; set; }

    [Parameter] 
    public bool AssureOutletExists { get; set; }

    protected override void OnInitialized()
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(OutletId);
        ArgumentNullException.ThrowIfNull(ChildContent);

        if (!DynamicComponentOutlet.OutletExistsWithId(OutletId) && !AssureOutletExists)
        {
            throw new ComponentException($"Outlet for outlet id `{OutletId}` does not exist. If this is a " +
                                         $"false positive, set the `AssureOutletExists` attribute to true.");
        }
        
        if (ContentPerId.TryGetValue(OutletId, out var list)) list.Add(ChildContent);
        else ContentPerId[OutletId] = [ChildContent];
        OnChangeWithOutletId?.Invoke(OutletId);
    }

    protected override void OnAfterRender(bool firstRender) => OnChangeWithOutletId?.Invoke(OutletId);

    public void Dispose()
    {
        if (string.IsNullOrWhiteSpace(OutletId) || ChildContent is null) return;
        ContentPerId[OutletId].Remove(ChildContent);
        OnChangeWithOutletId?.Invoke(OutletId);
    }
}