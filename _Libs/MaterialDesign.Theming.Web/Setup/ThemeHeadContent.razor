@using MaterialDesign.Theming.Web.CSS
@using MaterialDesign.Theming.Injection
@implements IDisposable
@inject ThemeContainer ThemeContainer

<link rel="stylesheet" href="@Path.Combine(ContentPathRoot, "css/colors.module.css")">
<link rel="stylesheet" href="@Path.Combine("css/tokens.css")">

@if (Theme!.IsDarkScheme)
{
    <link rel="stylesheet" href="@Path.Combine(ContentPathRoot, "css/theme.dark.css")">
}
else
{
    <link rel="stylesheet" href="@Path.Combine(ContentPathRoot, "css/theme.light.css")">
}

<ThemeCSSTokens Theme="@Theme"/>

@code {
    private Theme Theme => ThemeContainer.Theme;

    private async void OnChange() => await InvokeAsync(StateHasChanged);
    
    protected override void OnInitialized()
    {
        ThemeContainer.OnThemeUpdate += OnChange;
    }

    public void Dispose()
    {
        ThemeContainer.OnThemeUpdate -= OnChange;
    }

}