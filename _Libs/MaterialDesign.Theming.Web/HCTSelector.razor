@using MaterialDesign.Color.Colorspaces
@using Microsoft.AspNetCore.Components.Web

@if (UseParentDiv)
{
    <div class="HCTSelector" id="@SelectorId">
        <div class="@(DisplayWindowClassName) @(DisplayWindowClassName)Hue" style="background: linear-gradient(to right, @HueString)"></div>
        @HSlider
        <div class="@(DisplayWindowClassName) @(DisplayWindowClassName)Chroma" style="background: linear-gradient(to right, @GetChromaString())"></div>
        @CSlider
        <div class="@(DisplayWindowClassName) @(DisplayWindowClassName)Tone" style="background: linear-gradient(to right, @ToneString)"></div>
        @TSlider
    </div>
}
else
{
    <div class="@(DisplayWindowClassName) @(DisplayWindowClassName)Hue" style="background: linear-gradient(to right, @HueString)"></div>
    @HSlider
    <div class="@(DisplayWindowClassName) @(DisplayWindowClassName)Chroma" style="background: linear-gradient(to right, @GetChromaString())"></div>
    @CSlider
    <div class="@(DisplayWindowClassName) @(DisplayWindowClassName)Tone" style="background: linear-gradient(to right, @ToneString)"></div>
    @TSlider
}

@code {
    private const double Precision = 2;
    private const double Additive = 1 / Precision;
    private static readonly string HueString = string.Empty; // Hues and Tones will not update in the display window, just the chroma.
    private static readonly string ToneString = string.Empty;

    static HCTSelector()
    {
        for (double hue = 0; hue < 360; hue += Additive) HueString += $"{new HCTA(hue, 150, 50).ToRGBA()}, ";
        HueString = HueString[..^2];

        for (double tone = 0; ; tone += Additive)
        {
            bool shouldEnd = false;
            if (tone >= 100)
            {
                shouldEnd = true;
                tone = 100;
            }
            ToneString += $"{new HCTA(0, 0, tone).ToRGBA()}, ";
            if (shouldEnd) break;
        }
        
        ToneString = ToneString[..^2];
    }
    
    [Parameter, EditorRequired]
    public RenderFragment? HSlider { get; set; }
    
    [Parameter, EditorRequired]
    public RenderFragment? CSlider { get; set; }
    
    // ReSharper disable once InconsistentNaming | ReSharper sees the T before the prop and mistakes it with typeparam naming
    [Parameter, EditorRequired]
    public RenderFragment? TSlider { get; set; }

    private double _hue;
    private double _chroma;

    [Parameter, EditorRequired]
    public double Hue
    {
        get => _hue;
        set => _hue = Color.SanitizeDegrees(value);
    }

    [Parameter, EditorRequired]
    public double Chroma
    {
        get => _chroma;
        set => _chroma = UseChromaPercentage ? value / 100 * _maxChroma : value;
    }

    [Parameter, EditorRequired]
    public double Tone { get; set; }
    
    [Parameter]
    public Func<Task>? OnHCTUpdate { get; set; }
    
    [Parameter]
    public EventCallback<Func<Task>> OnHCTUpdateChanged { get; set; }

    [Parameter]
    public string? SelectorId {get; set; }

    [Parameter]
    public bool UseParentDiv { get; set; } = true;
    
    /// <summary>
    /// The class name provided to the individual color element (H, C, or T) display windows, followed by the
    /// element type (e.g. when the provided value is "DisplayWindow": class="DisplayWindowHue"), as well
    /// as just the <see cref="DisplayWindowClassName"/> itself for general application.
    /// </summary>
    [Parameter] 
    public string DisplayWindowClassName { get; set; } = "DisplayWindow";
    
    /// <summary>
    /// Whether or not the <see cref="CSlider"/> should be interpreted as a percentage of a color's max chroma
    /// rather than an absolute value.
    /// </summary>
    [Parameter]
    public bool UseChromaPercentage { get; set; }
    
    /// <summary>
    /// Whether or not the max chroma value should be precise or not when <see cref="UseChromaPercentage"/> is true.
    /// </summary>
    [Parameter]
    public bool UsePreciseChromaPercentage { get; set; }

    protected override Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(HSlider, nameof(HSlider));
        ArgumentNullException.ThrowIfNull(CSlider, nameof(CSlider));
        ArgumentNullException.ThrowIfNull(TSlider, nameof(TSlider));

        OnHCTUpdate = () => InvokeAsync(StateHasChanged);
        return OnHCTUpdateChanged.InvokeAsync(OnHCTUpdate);
    }

    private double _maxChroma = 150;
    
    private string GetChromaString()
    {
        string chromaString = string.Empty;
        _maxChroma = 150;

        if (Tone >= 98) // 98 tone is almost indistinguishable from white
        {
            chromaString = "white, white";
            return chromaString;
        }

        if (UseChromaPercentage)
        {
            HCTA hcta = new(Hue, Chroma, Tone);
            _maxChroma = UsePreciseChromaPercentage ? hcta.ExactMaxChroma(3) : hcta.MaxChroma();
        }

        for (double chroma = 0; ; chroma += Additive)
        {
            bool shouldEnd = false;
            if (chroma >= _maxChroma)
            {
                shouldEnd = true;
                chroma = _maxChroma;
            }

            chromaString += $"{new HCTA(Hue, chroma, Tone).ToRGBA()}, ";

            if (shouldEnd) break;
        }
        
        chromaString = chromaString[..^2];
        return chromaString;
    }
}