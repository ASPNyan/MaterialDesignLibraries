@using System.Diagnostics.CodeAnalysis
@typeparam TValue

<CascadingValue Value="BoundValue">
    @ChildContent
</CascadingValue>

@code {
    [CascadingParameter, NotNull]
    private BoundValue<TValue>? CascadingBoundValue { get; set; }

    private BoundValue<TValue> _boundValue = new(default!);
    private BoundValue<TValue> BoundValue
    {
        get => Overwrite ? _boundValue : CascadingBoundValue;
        set
        {
            if (Overwrite) _boundValue = value; 
            else CascadingBoundValue = value;
        }
    }

    [Parameter, EditorRequired]
    public TValue? Value
    {
        get => BoundValue.Get();
        set
        {
            // ReSharper disable ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
            if (value is null)
            {
                if (BoundValue is null)
                {
                    if (!SetNullWhenNull && DefaultValueIfNull is null) throw new ArgumentNullException(nameof(Value),
                        "Value cannot be null when no pre-existing BoundParameter exists and SetNullWhenNull is false. " +
                        $"To provide a default value when Value is null, use the `{nameof(DefaultValueIfNull)}` property.");
                
                    BoundValue = new BoundValue<TValue>(value!);
                    return;
                }
                if (SetNullWhenNull) BoundValue.Set(DefaultValueIfNull is not null ? DefaultValueIfNull() : value!);
                return;
            }

            if (BoundValue is null) BoundValue = new BoundValue<TValue>(value);
            else BoundValue.Set(value);
            // ReSharper restore ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
        }
    }

    [Parameter]
    public EventCallback<TValue>? ValueChanged { get; set; }

    [Parameter]
    public bool SetNullWhenNull { get; set; }
    
    [Parameter]
    public Func<TValue>? DefaultValueIfNull { get; set; }
    
    [Parameter]
    public bool Overwrite { get; set; }
    
    [Parameter]
    public bool SetOnly { get; set; }
    
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    protected override void OnParametersSet()
    {
        if (SetNullWhenNull && DefaultValueIfNull is null && Nullable.GetUnderlyingType(typeof(TValue)) == null)
            throw new ArgumentNullException(nameof(TValue),
                "BoundValues cannot be set to null when its type parameter is not Nullable<T>");

        if (ValueChanged is null && !SetOnly)
            throw new ArgumentException("ValueChanged should be assigned with either @bind-Value or explicitly defined.");
        
        if (!SetOnly) BoundValue.OnUpdate += OnUpdate;
    }

    private async void OnUpdate()
    {
        Value = BoundValue.Get();
        if (ValueChanged is not null) await InvokeAsync(() => ValueChanged.Value.InvokeAsync(Value));
    }
}