@inject ThemeContainer ThemeContainer
@using ExampleSite.DefaultThemes
@using MaterialDesign.Color.Schemes.Custom

<h3 style="font-weight: inherit">Current Theme: @ThemeName</h3>
<MudExpansionPanel @bind-Expanded="Expanded" Class="ExpansionPanel on-tertiary-container-text">
    <TitleContent>
        Theme Colors:
        <MudGrid Justify="Justify.SpaceBetween" Class="@GridClass">
            <MudItem Class="SchemeTiles surface-variant" Style="width: 100%;">
                <MudPaper Class="primary"/>
                <MudPaper Class="on-primary"/>
                <MudPaper Class="secondary"/>
                <MudPaper Class="on-secondary"/>
                <MudPaper Class="tertiary"/>
                <MudPaper Class="on-tertiary"/>
                <MudPaper Class="background"/>
                <MudPaper Class="on-background"/>
            </MudItem>
        </MudGrid>
    </TitleContent>
    
    <ChildContent>
        <SchemeTiles/>
    </ChildContent>
</MudExpansionPanel>



@code {
    private bool Expanded { get; set; }

    private string GridClass => "SchemeTileContainer DisplayGrid" + (Expanded ? " Expanded" : null);
    
    private IScheme Scheme => ThemeContainer.Scheme;

    private string ThemeName => Scheme switch
    {
        DefaultThemeBase defaultTheme => defaultTheme.ThemeName,
        ModifiableCustomScheme or GeometricScheme => "Custom (Advanced)",
        _ => "Custom",
    };
}