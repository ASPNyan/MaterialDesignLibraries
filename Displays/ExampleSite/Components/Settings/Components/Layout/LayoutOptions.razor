@using MaterialDesign.Web.Fonts
@using MaterialDesign.Web.Fonts.Enums
@inject LayoutSettings LayoutSettings

<div id="LayoutSettings" class="LayoutOptions">
    <MudSelect T="bool" @bind-Value="NewSettings.CloseDrawerOnNavigate" Label="Close Drawer on Navigate" Class="Option"
               Variant="Variant.Outlined" PopoverClass="SelectPopover surface-tint on-surface-text" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem T="bool" Value="true">Enable</MudSelectItem>
        <MudSelectItem T="bool" Value="false">Disable</MudSelectItem>
    </MudSelect>
    
    <MudSelect T="bool" @bind-Value="NewSettings.CloseDrawerOnMainFocus" Label="Close Drawer on Main Focus" Class="Option"
               Variant="Variant.Outlined" PopoverClass="SelectPopover surface-tint on-surface-text" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem T="bool" Value="true">Enable</MudSelectItem>
        <MudSelectItem T="bool" Value="false">Disable</MudSelectItem>
    </MudSelect>
    
    <MudSelect T="bool" @bind-Value="NewSettings.FloatingDrawer" Label="Drawer Behavior" Class="Option"
               Variant="Variant.Outlined" PopoverClass="SelectPopover surface-tint on-surface-text" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem T="bool" Value="true">Floating</MudSelectItem>
        <MudSelectItem T="bool" Value="false">Responsive</MudSelectItem>
    </MudSelect>
    
    <MudDivider Style="border-color: var(--md-sys-color-outline); flex-grow: 0;"/>
    
    <MudSelect T="Fonts.FontFamily?" @bind-Value="FontFamilyFilter" ToStringFunc="@(x => x?.ToString() ?? "Any")" Class="Option"
               Variant="Variant.Outlined" PopoverClass="SelectPopover surface-tint on-surface-text" Label="Font Family Filter" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem T="Fonts.FontFamily?" Value="null">Any</MudSelectItem>
        @foreach (Fonts.FontFamily? family in Enum.GetValues<Fonts.FontFamily>())
        {
            <MudSelectItem T="Fonts.FontFamily?" Value="family">@Fonts.GetFontFamily(family.Value)</MudSelectItem>
        }
    </MudSelect>
    <MudSelect T="FontWeightValue?" @bind-Value="FontWeightFilter" ToStringFunc="@(x => x?.ToString() ?? "Any")" Class="Option"
               Variant="Variant.Outlined" PopoverClass="SelectPopover surface-tint on-surface-text" Label="Font Weight Filter" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem T="FontWeightValue?" Value="null">Any</MudSelectItem>
        @foreach (FontWeightValue? weight in Enum.GetValues<FontWeightValue>())
        {
            if (weight is FontWeightValue.Bolder or FontWeightValue.Lighter or FontWeightValue.Regular) continue;
            <MudSelectItem T="FontWeightValue?" Value="weight">@weight.Value</MudSelectItem>
        }
    </MudSelect>
    <MudSelect T="bool?" @bind-Value="SerifFilter" ToStringFunc="@(x => x?.ToString() ?? "Either")" Class="Option"
               Variant="Variant.Outlined" PopoverClass="SelectPopover surface-tint on-surface-text" Label="Font Style Filter">
        <MudSelectItem T="bool?" Value="null">Either</MudSelectItem>
        <MudSelectItem T="bool?" Value="true">Serif</MudSelectItem>
        <MudSelectItem T="bool?" Value="false">Sans-Serif</MudSelectItem>
    </MudSelect>
    <MudSelect T="FontFace" @bind-Value="NewSettings.PageFont" Label="Site Font" Class="Option" Variant="Variant.Outlined"
               PopoverClass="SelectPopover surface-tint on-surface-text" Text="@GetFontText(NewSettings.PageFont)" AnchorOrigin="Origin.BottomCenter">
        @foreach (FontFace font in FilteredFonts)
        {
            <MudSelectItem T="FontFace" Value="font">
                <ScopedFont FontFace="font">@GetFontText(font)</ScopedFont>
            </MudSelectItem>
        }
    </MudSelect>
</div>

@code {
    [Parameter, EditorRequired]
    public LayoutSettings NewSettings { get; set; } = null!;

    private Fonts.FontFamily? _fontFamilyFilter;
    private Fonts.FontFamily? FontFamilyFilter
    {
        get => _fontFamilyFilter;
        set
        {
            _fontFamilyFilter = value;
            StateHasChanged();
        }
    }

    private FontWeightValue? _fontWeightFilter;
    private FontWeightValue? FontWeightFilter
    {
        get => _fontWeightFilter;
        set
        {
            _fontWeightFilter = value;
            StateHasChanged();
        }
    }

    private bool? _serifFilter;
    private bool? SerifFilter
    {
        get => _serifFilter;
        set
        {
            _serifFilter = value;
            StateHasChanged();
        }
    }

    private FontFace[] FilteredFonts => Fonts.FilterFontFaces(FontFamilyFilter, FontWeightFilter, SerifFilter);

    private static string GetFontText(FontFace font)
    {
        FontWeightValue weight = Enum.Parse<FontWeightValue>(font.Weight, true);
        return font.Family.Trim('"') + $" - {weight}"; // interpolating the trim statement causes a compilation error.
    }
}
