@using System.Numerics
@rendermode InteractiveServer
@page "/Settings/Layout"
@inject LayoutSettings LayoutSettings

<DynamicHeadContent>
    <link rel="stylesheet" href="css/Layout.css">
</DynamicHeadContent>

<article id="LayoutSettingsGrid" style="">
    <div id="LayoutSettings" @onmousemove="AssignMouseEvent(MoveBox)" @onmouseup="() => _mouseDown = false" 
         @onmouseleave="() => _mouseDown = false">
        <MudPaper Class="@LayoutSettings.DrawerClass" Width="150px" Height="150px" Style="@BoxStyle" dragging="@_dragging"
                  id="DrawerPosition" @onmousedown="SetMouseState(true)" @onmouseup="SetMouseState(false)" Elevation="0"/>
    </div>
    <div id="ApplySettings">
        <MudButton id="ApplyButton" Class="primary on-primary-text" OnClick="ApplySettings">
            <MdIconText Icon="Check Circle" Text="Apply" Weight="300" Grade="0" class="SettingsIconText"/>
        </MudButton>
        <div id="ResetWrapper">
            @{
                bool disabled = LayoutSettings == NewSettings;
                <MudButton id="ResetButton" Class="secondary on-secondary-text" Disabled="@(disabled)" OnClick="ResetSettings">
                    <MdIconText Icon="Refresh" Text="Reset" Weight="300" Grade="0" class="SettingsIconText"/>
                    @if (disabled)
                    {
                        <div class="StrikeThrough"></div>
                    }
                </MudButton>
            }
        </div>
    </div>
</article>

@code {
    private static readonly Vector2 LayoutSettingsSize = new(1280, 720);
    private static readonly Vector2 DrawerBoxSize = new(150, 150); // all vectors are in px
    const int InteractiveAreaSize = 100; // px

    private LayoutSettings NewSettings { get; set; } = null!;
    
    private Vector2? InitialPos { get; set; }
    private Vector2 LastMouseOffset { get; set; }
    private Vector2 MouseOffset { get; set; }
    private Vector2 BoxOffset { get; set; } = Vector2.Zero;
    private LayoutSettings.LayoutPosition? DrawerPosition { get; set; }
    
    // subtract 2 from all layout size options to account for border size.
    private string BoxStyle => DrawerPosition switch
    {
        LayoutSettings.LayoutPosition.Left => $"transform: translate(0, 0); width: {InteractiveAreaSize}px; height: {LayoutSettingsSize.Y - 2}px",
        LayoutSettings.LayoutPosition.Right => $"transform: translate({LayoutSettingsSize.X - 2 - InteractiveAreaSize}px, 0); width: {InteractiveAreaSize}px; height: {LayoutSettingsSize.Y - 2}px",
        LayoutSettings.LayoutPosition.Top => $"transform: translate(0, 0); width: {LayoutSettingsSize.X - 2}px; height: {InteractiveAreaSize}px",
        LayoutSettings.LayoutPosition.Bottom => $"transform: translate(0, {LayoutSettingsSize.Y - 2 - InteractiveAreaSize}px); width: {LayoutSettingsSize.X - 2}px; height: {InteractiveAreaSize}px",
        null => $"transform: translate({BoxOffset.X}px, {BoxOffset.Y}px)",
        _ => throw new ArgumentOutOfRangeException()
    };
    private bool _mouseDown;
    private bool _dragging;

    private Action<MouseEventArgs> SetMouseState(bool down) => // todo: something is wrong with the positioning and idk what.
        args =>
        {
            InitialPos ??= new Vector2((float)args.ClientX, (float)args.ClientY) - BoxOffset;
            
            LastMouseOffset = MouseOffset;
            MouseOffset = DrawerPosition switch
            {
                LayoutSettings.LayoutPosition.Left or LayoutSettings.LayoutPosition.Right => 
                    new Vector2((float)args.OffsetX, (float)args.OffsetY / LayoutSettingsSize.Y * DrawerBoxSize.Y),
                null => new Vector2((float)args.OffsetX, (float)args.OffsetY),
                _ => throw new ArgumentOutOfRangeException()
            };

            if (LastMouseOffset == default) LastMouseOffset = MouseOffset;

            InitialPos = InitialPos.Value - (LastMouseOffset - MouseOffset);

            _mouseDown = down;

            if (!_mouseDown && DrawerPosition is null)
            {
                DrawerPosition = NewSettings.DrawerPosition;
            }
        };

    private void MoveBox(MouseEventArgs args)
    {
        if (!_mouseDown) return;

        double x = args.ClientX;
        double y = args.ClientY;

        Vector2 elementPos = new Vector2((float)x, (float)y);

        // offset the position by the mouse position, then clamp to min (1, 1) and max (container size - box size - (2, 2)).
        // start from (1, 1) and remove (2, 2) to account for the border.
        Vector2 borderPadding = new(2, 2);
        BoxOffset = Vector2.Clamp(elementPos - InitialPos!.Value, Vector2.One, LayoutSettingsSize - DrawerBoxSize - borderPadding);
        StateHasChanged();
    }
    
    private PushOutQueue<Action> BoxDragEvents { get; } = new(5);

    private Action<MouseEventArgs> AssignMouseEvent(Action<MouseEventArgs> eventAction)
    {
        return args => BoxDragEvents.Enqueue(() => eventAction(args));
    }

    protected override void OnInitialized()
    {
        NewSettings = new LayoutSettings
        {
            CloseDrawerOnNavigate = LayoutSettings.CloseDrawerOnNavigate, // todo: add to settings
            CloseDrawerOnMainFocus = LayoutSettings.CloseDrawerOnMainFocus, // todo: add to settings, add note that layout page always closes drawer on click.
            DrawerPosition = LayoutSettings.DrawerPosition, // finished, just using default.
            HeaderPosition = LayoutSettings.HeaderPosition, // todo: add to settings
            LayoutColor = LayoutSettings.LayoutColor, // todo: add to settings
        };
        
        DrawerPosition = NewSettings.DrawerPosition;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        foreach (Action method in BoxDragEvents) method();

        if (!_mouseDown)
        {
            _dragging = false;
            return;
        }
        
        // check if box in interactive area, prefer left and right before top and bottom.
        if (BoxOffset.X < InteractiveAreaSize)
        {
            NewSettings.DrawerPosition = LayoutSettings.LayoutPosition.Left;
            DrawerPosition = LayoutSettings.LayoutPosition.Left;
            _dragging = false;
            return;
        }

        if (BoxOffset.X > LayoutSettingsSize.X - DrawerBoxSize.X - InteractiveAreaSize)
        {
            NewSettings.DrawerPosition = LayoutSettings.LayoutPosition.Right;
            DrawerPosition = LayoutSettings.LayoutPosition.Right;
            _dragging = false;
            return;
        }

        DrawerPosition = null;
        _dragging = true;
    }

    private void ResetSettings()
    {
        NewSettings = LayoutSettings.Clone();
        DrawerPosition = NewSettings.DrawerPosition;
        StateHasChanged();
    }

    private void ApplySettings() => LayoutSettings.Update(NewSettings);
}