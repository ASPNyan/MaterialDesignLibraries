@using ExampleSite.Components.Settings.Components.Layout
@using ExampleSite.Services
@rendermode InteractiveServer
@page "/Settings/Layout/{Tab?}"
@inject LayoutSettings LayoutSettings
@inject SettingsStorageService SettingsStorage

<DynamicHeadContent>
    <link rel="stylesheet" href="css/Layout.css">
    <script>
        window.getPageWidth = function() {
            return Number.parseFloat(window.getComputedStyle(document.body).width.replace("px", ""));
        }
    </script>
</DynamicHeadContent>

<DynamicComponentContent OutletId="@MainLayout.AppBarId">
    <MudDivider Style="@MainLayout.DividerStylePushToRight(LayoutSettings)" Vertical="true" FlexItem="true"/>
    <MdIconText Icon="Drag Pan" Text="Positioning" Href="/Settings/Layout" active="@(Tab is null)"/>
    <MudDivider Style="@MainLayout.DividerStyle" Vertical="true" FlexItem="true"/>
    <MdIconText Icon="Tune" Text="Options" Href="/Settings/Layout/Options" active="@(Tab is "Options")"/>
    <MudDivider Style="@MainLayout.DividerStyle" Vertical="true" FlexItem="true"/>
    <MdIconText Icon="Palette" Text="Color" Href="/Settings/Layout/Color" active="@(Tab is "Color")"/>
    <MudDivider Style="@MainLayout.DividerStylePushToLeft(LayoutSettings)" Vertical="true" FlexItem="true"/>
</DynamicComponentContent>

<article id="LayoutSettingsGrid" @onclick="LayoutOnClick.Invoke">
    @switch (Tab)
    {
        case null:
            <LayoutPositioning NewSettings="NewSettings" DrawerPosition="StoredDrawer" HeaderPosition="StoredHeader" 
                               StoreValues="UpdateSavedLayoutPositions" @ref="LayoutPositioning"/>
            break;
        case "Options":
            <LayoutOptions NewSettings="NewSettings"/>
            break;
        case "Color":
            <CascadingValue TValue="OnClickContainer" Value="LayoutOnClick">
                <LayoutColor NewSettings="NewSettings"/>
            </CascadingValue>
            break;
    }
    
    <div id="ApplySettings">
        <MudButton id="ApplyButton" Class="primary on-primary-text" OnClick="ApplySettings">
            <MdIconText Icon="Check Circle" Text="Apply" Weight="300" Grade="0" class="SettingsIconText"/>
        </MudButton>
        <div id="ResetWrapper">
            <MudButton id="ResetButton" Class="secondary on-secondary-text" Disabled="@SettingsEqual" OnClick="ResetSettings">
                <MdIconText Icon="Refresh" Text="Reset" Weight="300" Grade="0" class="SettingsIconText"/>
                @if (SettingsEqual)
                {
                    <div class="StrikeThrough"></div>
                }
            </MudButton>
        </div>
    </div>
</article>

@code {
    [Parameter] 
    public string? Tab { get; set; }

    private LayoutSettings NewSettings { get; set; } = null!;
    
    private LayoutPositioning? LayoutPositioning { get; set; }
    private HeaderPosition? StoredHeader { get; set; }
    private DrawerPosition? StoredDrawer { get; set; }

    private OnClickContainer LayoutOnClick { get; set; } = null!;

    private bool SettingsEqual => LayoutSettings == NewSettings;
    
    protected override void OnInitialized()
    {
        LayoutOnClick = new OnClickContainer(StateHasChanged);
        
        NewSettings = new LayoutSettings
        {
            CloseDrawerOnNavigate = LayoutSettings.CloseDrawerOnNavigate,
            CloseDrawerOnMainFocus = LayoutSettings.CloseDrawerOnMainFocus,
            FloatingDrawer = LayoutSettings.FloatingDrawer,
            DrawerPosition = LayoutSettings.DrawerPosition,
            HeaderPosition = LayoutSettings.HeaderPosition,
            HeaderColor = LayoutSettings.HeaderColor,
            DrawerColor = LayoutSettings.DrawerColor,
            PageFont = LayoutSettings.PageFont
        };

        NewSettings.OnUpdate += StateHasChanged;
    }

    private void ResetSettings()
    {
        NewSettings.Update(LayoutSettings.Clone());
        LayoutPositioning?.ResetSettings();
        StateHasChanged();
    }

    private async Task ApplySettings()
    {
        LayoutSettings.Update(NewSettings);
        LayoutPositioning?.ApplySettings();
        await SettingsStorage.SetLayoutSettingsAsync(LayoutSettings);
        StateHasChanged();
    }

    private void UpdateSavedLayoutPositions(HeaderPosition? header, DrawerPosition? drawer)
    {
        StoredHeader = header ?? throw new ArgumentNullException(nameof(header));
        StoredDrawer = drawer ?? throw new ArgumentNullException(nameof(drawer));
    }

    public class OnClickContainer(Action stateHasChanged)
    {
        public event Action OnClick = stateHasChanged;

        public void Invoke() => OnClick();
    }
}