@using ExampleSite.Services
@inject ILogger<App> Logger
@inject SettingsStorageService SettingsStorage
@inject ThemeContainer ThemeContainer

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="_content/MudBlazor/MudBlazor.min.css"/>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <DynamicHeadOutlet @rendermode="InteractiveServer"/>
</head>

<body>
    <Routes @rendermode="InteractiveServer"/>
    <script src="_framework/blazor.web.js"></script>
</body>

</html>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        StorageRequestResult<IScheme> storedScheme = await SettingsStorage.GetSchemeAsync();
        
        if (storedScheme.Success) ThemeContainer.UpdateScheme(storedScheme.Value);
        if (storedScheme.Error is not null) Logger.LogWarning(storedScheme.Error, "Failed to get stored scheme.");
    }

}