@using MaterialDesign.Theming.Web.CSS
@using MaterialDesign.Theming.Web.MudBlazor
@using ExampleSite.Services
@using ExampleSite.Components.Settings
@using ExampleSite.Components.Settings.Components.Scheme
@using MaterialDesign.Web.Fonts.Enums
@inherits LayoutComponentBase
@implements IDisposable
@inject ILogger<App> Logger
@inject SettingsStorageService SettingsStorage
@inject ThemeContainer ThemeContainer
@inject NavigationManager Nav
@inject LayoutSettings LayoutSettings
@rendermode InteractiveServer

<DynamicHeadContent>
    <link rel="stylesheet" href="css/MainLayout.css">
</DynamicHeadContent>

<SiteFonts/>

<div class="@FontClass">
    <MdMudThemeProvider/>
</div>

<MdIconConfig Weight="400" Grade="0" LineStyle="MdIconLineStyle.Rounded" OpticalSize="24" Fill="true">
    <MudLayout Class="@FontClass">
        <MudDrawer @bind-Open="DrawerOpen" Variant="DrawerVariant" Anchor="@LayoutSettings.MudDrawerPosition" Elevation="1"
                   Class="@LayoutSettings.DrawerClass" ClipMode="DrawerClipMode.Always" Overlay="false" id="Drawer">
            <spacer/>
            <MdIconText Href="/" Icon="Home" Text="Home" Scale="1.3" class="on-secondary-container-text"/>
            <MudDivider Style="@DividerStyle"/>
            <DynamicComponentOutlet Id="@DrawerId"/>
            <SettingsDrawer/>
            <spacer/>
        </MudDrawer>
        <MudAppBar Elevation="2" Class="@LayoutSettings.HeaderClass" id="AppBar"
                   Bottom="@(LayoutSettings.HeaderPosition is LayoutSettings.LayoutPosition.Bottom)">
            <MdIcon Icon="Menu" @onclick="ToggleDrawer"/>
            <MudDivider Vertical="true" FlexItem="true" Style="@DividerStyleLeft"/>
            <DynamicComponentOutlet Id="@AppBarId"/>
            <MudDivider Vertical="true" FlexItem="true" Style="@DividerStyleRight"/>
            <MudTooltip Placement="Placement.Bottom" RootStyle="margin: auto 0; height: 36px" Class="SchemeTooltip"
                        Text="@($"Switch to {(Scheme.IsDarkScheme ? "Light" : "Dark")} Mode")" Delay="200">
                <MdIcon Icon="@SchemeIcon" Fill="true" Scale="1.5" style="cursor: pointer;" @onclick="ToggleScheme"/>
            </MudTooltip>
        </MudAppBar>
        <MudMainContent @onclick="CloseDrawer">
            <main class="background on-background-text">
                @Body
            </main>
        </MudMainContent>
    </MudLayout>
</MdIconConfig>

@code {
    public const string DividerStyle = $"border-color: var({ThemeCSSTokens.OnSecondaryContainerCSSToken}); flex-grow: 0;";

    private const string DividerStylePushLeft = $"margin-right: auto; {DividerStyle}";
    private const string DividerStylePushRight = $"margin-left: auto; {DividerStyle}";

    public static string DividerStylePushToLeft(LayoutSettings settings) =>
        settings.DrawerPosition is LayoutSettings.LayoutPosition.Left ? DividerStylePushLeft : DividerStylePushRight;

    public static string DividerStylePushToRight(LayoutSettings settings) =>
        settings.DrawerPosition is LayoutSettings.LayoutPosition.Left ? DividerStylePushRight : DividerStylePushLeft;
    
    // swap values when flex flow reverses.
    private string DividerStyleLeft => DividerStylePushToLeft(LayoutSettings);

    private string DividerStyleRight => DividerStylePushToRight(LayoutSettings);
    
    public static string DrawerId { get; } = Guid.NewGuid().ToString();
    public static string AppBarId { get; } = Guid.NewGuid().ToString();
    
    private bool DrawerOpen { get; set; }

    private void ToggleDrawer()
    {
        DrawerOpen = !DrawerOpen;
        StateHasChanged();
    }
    
    private IScheme Scheme => ThemeContainer.Scheme;

    private string SchemeIcon => Scheme.IsDarkScheme ? "Dark Mode" : "Light Mode";

    private string FontClass => (LayoutSettings.PageFont.Family.Trim('"').Replace(" ", null) + ' ' 
        + Enum.Parse<FontWeightValue>(LayoutSettings.PageFont.Weight, true)).ToLowerInvariant();

    private DrawerVariant DrawerVariant => Nav.Uri.EndsWith("/Settings/Layout") || LayoutSettings.FloatingDrawer
        ? DrawerVariant.Temporary : DrawerVariant.Responsive;
    
    private void ToggleScheme()
    {
        if (Scheme.IsDarkScheme) Scheme.SetLight();
        else Scheme.SetDark();
    }

    private void CloseDrawer()
    {
        if (LayoutSettings.CloseDrawerOnMainFocus) DrawerOpen = false;
    }

    private async void OnUpdate() => await InvokeAsync(StateHasChanged);
    private async void OnNavigate(object? _1, LocationChangedEventArgs _2) => await InvokeAsync(() =>
    {
        if (DrawerOpen && LayoutSettings.CloseDrawerOnNavigate) DrawerOpen = false;
        StateHasChanged();
    });
    
    protected override void OnInitialized()
    {
        ThemeContainer.OnSchemeUpdate += OnUpdate;
        LayoutSettings.OnUpdate += OnUpdate;
        Nav.LocationChanged += OnNavigate;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        StorageRequestResult<IScheme> storedScheme = await SettingsStorage.GetSchemeAsync();

        if (storedScheme.Success) ThemeContainer.UpdateScheme(storedScheme.Value);
        // TaskCancelledException means the page was refreshed multiple times and quickly, which is fine, and should be ignored.
        else if (storedScheme.Error is not null and not TaskCanceledException)
            Logger.LogError(storedScheme.Error, "Failed to get stored scheme.");
        else Logger.LogInformation("No stored scheme found. This may be indicative of an error, but in of itself is not.");

        StorageRequestResult<LayoutSettings> storedLayout = await SettingsStorage.GetLayoutSettingsAsync();
        
        if (storedLayout.Success) LayoutSettings.Update(storedLayout.Value);
        else if (storedLayout.Error is not null and not TaskCanceledException)
            Logger.LogError(storedLayout.Error, "Failed to get stored layout.");
        else Logger.LogInformation("No stored layout found. This may be indicative of an error, but in of itself is not.");
    }

    public void Dispose()
    {
        ThemeContainer.OnSchemeUpdate -= OnUpdate;
        Nav.LocationChanged -= OnNavigate;
    }
}
