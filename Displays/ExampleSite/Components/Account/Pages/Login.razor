@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Identity
@inherits UpdatableBase
@inject SignInManager<User> SignIn
@inject NavigationManager Nav
@page "/Account/Login"

<DynamicHeadContent>
    <link rel="stylesheet" href="css/Login.css">
</DynamicHeadContent>

<article class="surface-container-highest">
    <h1 class="primary-text">Login</h1>
    <section>
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            @{
                context.OnFieldChanged += delegate { StateHasChanged(); };
            }
            <DataAnnotationsValidator/>
            <ValidationSummary class="error-text"/>
            <MudTextField @bind-Value="Input.Email" Required="true" Placeholder="Email Address" InputType="InputType.Email"
                          Validation="@(new EmailAddressAttribute { ErrorMessage = "Invalid Email Address." })"
                          autocomplete="username" aria-required="true" Class="Input" T="string"/>
            <MudTextField @bind-Value="Input.Password" InputType="InputType.Password" Required="true" Placeholder="Password"
                          T="string" Validation="@((Func<string, IEnumerable<string>>)PasswordValidation)" Class="Input"/>
            <MudCheckBox T="bool" @bind-Value="Input.RememberMe" Color="Color.Secondary" Label="Remember me?"/>
            <MudButton Color="@(context.Validate() ? Color.Primary : Color.Error)" ButtonType="ButtonType.Submit"
                       Class="primary-container">
                Submit
            </MudButton>
        </EditForm>
        @if (DisplayErrorMessage)
        {
            <span class="error-text">Failed to verify login credentials.</span>
        }
        <p class="secondary-text">
            No Account? Click
            <a class="tertiary-text" style="cursor: pointer;" href="/SignUp" @*@onclick="RedirectToSignUp"*@>Here</a>
            to Sign Up.
        </p>
    </section>
</article>


@code {
    [SupplyParameterFromQuery] 
    public string? Return { get; set; }
    
    [SupplyParameterFromForm] 
    private InputModel Input { get; set; } = new();
    
    private bool DisplayErrorMessage { get; set; }

    private static IEnumerable<string> PasswordValidation(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password Required.";
            yield break;
        }

        if (pw.Length < 8) yield return "Password must be at least 8 characters.";
        if (!Regex.IsMatch(pw, "[A-Z]")) yield return "Password must contain at least 1 uppercase character.";
        if (!Regex.IsMatch(pw, "[a-z]")) yield return "Password must contain at least 1 lowercase character.";
        if (!Regex.IsMatch(pw, "[0-9]")) yield return "Password must contain at least 1 numerical character.";
    }
    
    private async Task LoginUser()
    {
        DisplayErrorMessage = false;
        SignInResult result = await SignIn.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, false);

        if (result.Succeeded)
        {
            Nav.NavigateTo(Uri.UnescapeDataString(Return ?? "%2F"));
            return;
        }

        DisplayErrorMessage = true;
        StateHasChanged();
    }

    private void RedirectToSignUp()
    {
        string path = "/SignUp" + (string.IsNullOrWhiteSpace(Return) ? null : $"?return={Return}");
        Nav.NavigateTo(path);
    }
    
    private class InputModel
    {
        [Required, EmailAddress] 
        public string Email { get; set; } = "";

        [Required, DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}