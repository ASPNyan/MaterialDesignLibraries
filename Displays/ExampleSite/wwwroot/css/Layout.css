#LayoutSettingsGrid {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
}

#LayoutSettings {
    width: 1280px;
    height: 720px;
    border: var(--md-sys-color-outline-variant) 1px solid;
    border-radius: 5px;
    overflow: hidden;
}

/* Apply & Reset buttons */

#ApplySettings {
    width: 300px;
    height: 40px;

    display: flex;
    justify-content: space-between;
    align-items: center;
}

#ApplySettings .mud-button-root {
    width: 125px;
}

#ResetWrapper:has(#ResetButton:disabled) {
    cursor: not-allowed;
}

#ResetButton:disabled {
    color: var(--md-sys-color-on-secondary-text) !important;
    filter: saturate(50%);
}

.mud-button-label {
    width: max-content;
}

.StrikeThrough {
    position: absolute;
    width: 78px;
    height: 1px;
    background: var(--md-sys-color-on-secondary-text);
}

#ApplyButton, 
#ResetButton {
    box-shadow: var(--mud-elevation-0);
    transition: box-shadow 150ms cubic-bezier(0, 0, 0.2, 1);
}

#ApplyButton:hover,
#ResetButton:not(:disabled):hover {
    box-shadow: var(--mud-elevation-8);
}

#AppBar :is(span, a):has(> span.material-symbols-sharp ~ span, 
                         > span.material-symbols-outlined ~ span, 
                         > span.material-symbols-rounded ~ span) {
    border-radius: 50px;
    border: 2px transparent solid;
    padding: 4px 7px 4px 4px;
}

#AppBar :is(span, a):has(> span.material-symbols-sharp ~ span, 
                         > span.material-symbols-outlined ~ span, 
                         > span.material-symbols-rounded ~ span)[active] {
    border: 2px currentColor solid;
    padding: 4px 7px 4px 4px;
}

/* Positioning */

#DrawerPosition,
#HeaderPosition {
    transition: width 80ms ease-in, height 80ms ease-in, transform 80ms ease-out, border-radius 80ms ease;
    border-radius: 0;
}

#DrawerPosition[dragging],
#HeaderPosition[dragging] {
    transition: none;
    border-radius: var(--mud-default-borderradius);
}

/* Options */

#LayoutSettings.LayoutOptions {
    width: 540px;
    height: 720px; /* 3:4 aspect ratio */
    display: flex;
    justify-content: space-evenly;
    flex-flow: column wrap;
    padding: 10px;
}

.mud-select:has(.Option) {
    flex-grow: 0 !important;
}

#LayoutSettings .Option {
    width: 100%;
    flex-grow: 0 !important;
}

.mud-input.mud-input-outlined:not(.mud-disabled):not(:focus-within):hover .mud-input-outlined-border {
    border-color: var(--md-sys-color-surface-tint) !important;
}

.mud-input.mud-input-outlined:not(.mud-disabled):focus-within .mud-input-outlined-border {
    border-color: var(--md-sys-color-primary-container) !important;
}

.Option:has(.mud-input.mud-input-outlined:not(.mud-disabled):focus-within) .mud-input-label {
    color: var(--md-sys-color-primary-container-text) !important;
}

.SelectPopover .mud-list-item {
    margin: 0 5px;
    padding: 8px 11px;
    width: calc(100% - 10px);
    border-radius: 5px;
}

.SelectPopover .mud-list-item:has(~ .mud-list-item) {
    margin-bottom: 5px;
}

.SelectPopover .mud-selected-item {
    color: var(--md-sys-color-on-primary-text) !important;
    background: transparent !important;
    backdrop-filter: saturate(15) contrast(0.3);
    transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1), backdrop-filter 150ms cubic-bezier(0.4, 0, 0.2, 1);
}

.SelectPopover .mud-selected-item:hover {
    backdrop-filter: saturate(5) contrast(0.5);
}


