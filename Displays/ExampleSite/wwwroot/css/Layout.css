#LayoutSettingsGrid {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    min-height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    gap: 20px;
}

#LayoutSettings {
    width: calc(min(1280px, 65vw));
    height: calc(min(1280px, 65vw / (16/9)));
    border: var(--md-sys-color-outline-variant) 1px solid;
    border-radius: 5px;
    overflow: hidden;
}

/* Apply & Reset buttons */

#ApplySettings {
    width: 300px;
    height: 40px;

    display: flex;
    justify-content: space-between;
    align-items: center;
}

#ApplySettings .mud-button-root {
    width: 125px;
}

#ResetWrapper:has(#ResetButton:disabled) {
    cursor: not-allowed;
}

#ResetButton:disabled {
    color: var(--md-sys-color-on-secondary-text) !important;
    filter: saturate(50%);
}

.mud-button-label {
    width: max-content;
}

.StrikeThrough {
    position: absolute;
    width: 78px;
    height: 1px;
    background: var(--md-sys-color-on-secondary-text);
}

#ApplyButton,
#ResetButton {
    box-shadow: var(--mud-elevation-0);
    transition: box-shadow 150ms cubic-bezier(0, 0, 0.2, 1);
}

#ApplyButton:hover,
#ResetButton:not(:disabled):hover {
    box-shadow: var(--mud-elevation-8);
}

#AppBar :is(span, a):has(> span.material-symbols-sharp ~ span, 
                         > span.material-symbols-outlined ~ span, 
                         > span.material-symbols-rounded ~ span) {
    border-radius: 50px;
    border: 2px transparent solid;
    padding: 4px 7px 4px 4px;
}

#AppBar :is(span, a):has(> span.material-symbols-sharp ~ span, 
                         > span.material-symbols-outlined ~ span, 
                         > span.material-symbols-rounded ~ span)[active] {
    border: 2px currentColor solid;
    padding: 4px 7px 4px 4px;
}

/* Positioning */

#LayoutSettings:not(.LayoutColor) #DrawerPosition,
#LayoutSettings:not(.LayoutColor) #HeaderPosition {
    cursor: grab;
}

#DrawerPosition,
#HeaderPosition {
    transition: width 80ms ease-in, height 80ms ease-in, transform 80ms ease-out, border-radius 80ms ease,
    background-color 150ms, color 150ms;
    border-radius: 0;
}

#DrawerPosition[dragging],
#HeaderPosition[dragging] {
    transition: none;
    border-radius: var(--mud-default-borderradius);
    cursor: grabbing !important;
}

/* Options */

#LayoutSettings.LayoutOptions {
    width: 540px;
    height: 720px; /* 3:4 aspect ratio */
    display: flex;
    justify-content: space-evenly;
    flex-flow: column wrap;
    padding: 10px;
}

.mud-select:has(.Option) {
    flex-grow: 0 !important;
}

#LayoutSettings .Option {
    width: 100%;
    flex-grow: 0 !important;
}

#LayoutSettings .Option .mud-input,
.Option:has(.mud-input.mud-input-outlined:not(.mud-disabled)) .mud-input-label {
    color: var(--md-sys-color-on-surface-variant-text) !important;
}

.mud-input.mud-input-outlined:not(.mud-disabled):not(:focus-within):hover .mud-input-outlined-border {
    border-color: var(--md-sys-color-surface-tint) !important;
}

.mud-input.mud-input-outlined:not(.mud-disabled):focus-within .mud-input-outlined-border {
    border-color: var(--md-sys-color-primary-container) !important;
}

#LayoutSettings .Option:has(.mud-input.mud-input-outlined:not(.mud-disabled):focus-within) .mud-input,
.Option:has(.mud-input.mud-input-outlined:not(.mud-disabled):focus-within) .mud-input-label {
    color: var(--md-sys-color-on-surface-text) !important;
}

.SelectPopover .mud-list-item {
    margin: 0 5px;
    padding: 8px 11px;
    width: calc(100% - 10px);
    border-radius: 5px;
    color: inherit !important;
    transition: background-color 150ms cubic-bezier(0.4, 0, 0.2, 1), color 150ms cubic-bezier(0.4, 0, 0.2, 1);
}

.SelectPopover .mud-list-item:has(~ .mud-list-item) {
    margin-bottom: 5px;
}

.SelectPopover .mud-selected-item {
    background-color: var(--md-sys-color-on-surface) !important;
    color: var(--md-sys-color-surface-text) !important;
}

.SelectPopover .mud-selected-item:hover {
    background-color: var(--md-sys-color-on-surface-variant) !important;
}

/* Color */

#LayoutSettings.LayoutColor[header] #HeaderPosition,
#LayoutSettings.LayoutColor[drawer] #DrawerPosition {
    background-color: color-mix(in srgb, currentColor, transparent 75%);
    background-image: radial-gradient(var(--md-sys-color-outline-variant) 2px, transparent 3px);
    background-size: 25px 25px;
}

#LayoutSettings.LayoutColor[header]:has(.ColorSelectionWheel:hover) #HeaderPosition,
#LayoutSettings.LayoutColor[drawer]:has(.ColorSelectionWheel:hover) #DrawerPosition {
    background-color: color-mix(in srgb, currentColor, transparent 40%);
}

#LayoutSettings.LayoutColor[header] #HeaderPosition {
    animation: ScrollHorizontal 10s infinite linear;
}

@keyframes ScrollHorizontal {
    from {
        background-position: 0 0;
    }
    to {
        background-position: -99.999% 0; /* if you do 100% there is a very small, noticeable skip. */
    }
}

#LayoutSettings.LayoutColor[drawer] #DrawerPosition {
    animation: ScrollVertical 5.625s infinite linear;
}

@keyframes ScrollVertical {
    from {
        background-position: 0 0;
    }
    to {
        background-position: 0 99.999%;
    }
}

.ColorSelectionWheel {
    position: absolute;
    top: calc(50% - 12vw);
    left: calc(50% - 12vw);
    width: 24vw;
    height: 24vw;
    border-radius: 250px;
    overflow: hidden;
    opacity: 0;
    transition: opacity 150ms cubic-bezier(0, 0, 0.2, 1);
}

.ColorSelectionWheel .ColorSelection {
    --index: 0;
    position: absolute;
    left: 50%;
    bottom: 0;
    aspect-ratio: 1.16;
    height: calc(min(250px, 12vw));
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
    transform-origin: top center;
    rotate: calc(60deg * var(--index));
    translate: -50% 0;
}

.ColorSelectionWheel[display] {
    opacity: 1;
}

.ColorSelectionWheel .ColorSelection > span {
    position: absolute;
    top: 67%;
    left: 50%;
    translate: -50% -50%;
    rotate: calc(-60deg * var(--index));
    transform-origin: center center;
}
