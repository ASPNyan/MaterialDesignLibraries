@using MusicApp.Components.Layout
@using MaterialDesign.Theming.Injection
@using MusicApp.Services
@page "/"
@inject SongInfoContainer SongInfoContainer
@inject ThemeContainer ThemeContainer

<DynamicHeadContent>
    <link rel="stylesheet" href="css/Home.css">
</DynamicHeadContent>

<PageTitle>Home</PageTitle>

<DynamicComponentContent OutletId="@AppLayout.TopId">
    <MdIcon Icon="Palette" class="ThemeMenu" @onclick="@ToggleThemeMenu"/>
    @if (ThemeMenuOpen)
    {
        <ThemeOptionsMenu/>
    }
</DynamicComponentContent>
<DynamicComponentContent OutletId="@AppLayout.LeftId">
    @if (SongPlaying)
    {
        <img src="@SongInfo.AlbumCoverUrl" alt="@SongInfo.Album" id="PlayingAlbumCover"/>
    }
</DynamicComponentContent>

<SongListComponent/>

@code {
    private SongInfo SongInfo => SongInfoContainer.SongInfo;
    private bool SongPlaying => SongInfo != SongInfo.Empty;
    
    private bool ThemeMenuOpen { get; set; }

    private void ToggleThemeMenu()
    {
        ThemeMenuOpen = !ThemeMenuOpen;
    }

    protected override void OnInitialized()
    {
        ThemeContainer.OnThemeUpdate += async () => await InvokeAsync(StateHasChanged);
        SongInfoContainer.OnInfoUpdate += async () => await InvokeAsync(StateHasChanged);
    }
}