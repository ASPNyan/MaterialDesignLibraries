@using MusicApp.Components.Layout
@using MaterialDesign.Theming.Injection
@using MusicApp.Enums
@using MusicApp.Services
@using MaterialDesign.Icons
@page "/"
@inject SongInfoContainer SongInfoContainer
@inject ThemeContainer ThemeContainer

<DynamicHeadContent>
    <link rel="stylesheet" href="css/Home.css">
</DynamicHeadContent>

<PageTitle>Home</PageTitle>

<DynamicComponentContent OutletId="@AppLayout.TopId">
    <MdIcon Icon="Palette" class="ThemeMenu" @onclick="@ToggleThemeMenu"/>
    @if (ThemeMenuOpen)
    {
        <ThemeOptionsMenu/>
    }
    <MdIcon Icon="Format Size" class="FontMenu" @onclick="@ToggleFontMenu"/>
</DynamicComponentContent>
<DynamicComponentContent OutletId="@AppLayout.LeftId">
    @if (SongPlaying)
    {
        <img src="@SongInfo.AlbumCoverUrl" alt="@SongInfo.Album" id="PlayingAlbumCover"/>
    }
</DynamicComponentContent>

<MdIcon Icon="@GetListViewIcon()" Fill="false" LineStyle="MdIconLineStyle.Rounded" 
        class="SongListViewToggle on-surface-variant-text surface-container" @onclick="@ToggleSongListView"/>

<SongListComponent TileStyle="@ListTileStyle"/>

@code {
    private SongInfo SongInfo => SongInfoContainer.SongInfo;
    private bool SongPlaying => SongInfo != SongInfo.Empty;
    
    private bool ThemeMenuOpen { get; set; }
    private bool FontMenuOpen { get; set; }
    
    private SongTileStyle ListTileStyle { get; set; }

    private void ToggleThemeMenu()
    {
        ThemeMenuOpen = !ThemeMenuOpen;
        if (ThemeMenuOpen) FontMenuOpen = false;
    }

    private void ToggleFontMenu()
    {
        FontMenuOpen = !FontMenuOpen;
        if (FontMenuOpen) ThemeMenuOpen = false;
    }

    protected override void OnInitialized()
    {
        ThemeContainer.OnSchemeUpdate += async () => await InvokeAsync(StateHasChanged);
        SongInfoContainer.OnInfoUpdate += async () => await InvokeAsync(StateHasChanged);
    }

    private void ToggleSongListView()
    {
        ListTileStyle = ListTileStyle is SongTileStyle.Comfy ? SongTileStyle.Compact : SongTileStyle.Comfy;
        StateHasChanged();
    }

    private string GetListViewIcon() => ListTileStyle is SongTileStyle.Comfy ? "Grid View" : "List";
}