@using MaterialDesign.Theming.Injection
@using MudBlazor
@using MaterialDesign.Theming.Web
@using MaterialDesign.Color.Colorspaces
@using MaterialDesign.Theming
@using MudBlazor.Utilities
@using MusicApp.Services
@implements IDisposable
@inject ThemeContainer ThemeContainer
@inject ScopedSettings ScopedSettings

<DynamicHeadContent>
    <link rel="stylesheet" href="css/ThemeOptionsMenu.css">
</DynamicHeadContent>

<div class="ThemeSettings surface tertiary-text">
    <MudTooltip Text="@("Switch to " + (ThemeContainer.Theme.IsDarkScheme ? "Light" : "Dark") + " Mode")" 
                RootClass="ThemeTooltip" Class="ThemeSettingsTooltip">
        <MdIcon Icon="@GetThemeIconString()" id="ThemeSwitch" class="on-tertiary" @onclick="@SwitchTheme"/>
    </MudTooltip>
    <MudTooltip Text="Toggle Dynamic Theming" RootClass="DynamicTooltip" Class="ThemeSettingsTooltip">
        <MdIcon Icon="@GetDynamicIconString()" id="DynamicSwitch" class="on-tertiary" @onclick="@ScopedSettings.ToggleDynamicTheme"/>
    </MudTooltip>
    <HCTSelector Hue="@Hcta.H" Chroma="@Hcta.C" Tone="@Hcta.T" @bind-OnHCTUpdate="@OnHCTUpdate" UseParentDiv="false">
        <HSlider>
            <MudSlider T="double" Min="0" Max="359" Value="@Hcta.H" ValueChanged="@OnHueUpdate" Class="HueSlider Slider"
                       ValueLabel="true" Size="@Size.Medium" Disabled="@ScopedSettings.DynamicTheme"/>
        </HSlider>
        <CSlider>
            <MudSlider T="double" Min="0" Max="150" Value="@Hcta.C" ValueChanged="OnChromaUpdate" Class="ChromaSlider Slider"
                       ValueLabel="true" Size="@Size.Medium" Disabled="@ScopedSettings.DynamicTheme" Variant="@Variant.Filled"/>
        </CSlider>
        <TSlider>
            <MudSlider T="double" Min="0" Max="100" Value="@Hcta.T" ValueChanged="OnToneUpdate" Class="ToneSlider Slider"
                       ValueLabel="true" Size="@Size.Medium" Disabled="@ScopedSettings.DynamicTheme" Variant="@Variant.Filled"/>
        </TSlider>
    </HCTSelector>
</div>

@code {
    private HCTA Hcta { get; set; } = new(0, 0, 0);
    private Func<Task>? OnHCTUpdate { get; set; }
    
    private string GetThemeIconString() => (ThemeContainer.Theme.IsDarkScheme ? "Dark" : "Light") + " Mode";
    private string GetDynamicIconString() => "Invert Colors " + (ScopedSettings.DynamicTheme ? "Off" : string.Empty);

    private void SwitchTheme()
    {
        if (ThemeContainer.Theme.IsDarkScheme) ThemeContainer.Theme.SetLight();
        else ThemeContainer.Theme.SetDark();

        StateHasChanged();
    }

    private async Task UpdateHCTA()
    {
        if (OnHCTUpdate is not null) await OnHCTUpdate();
        ThemeContainer.UpdateTheme(new Theme(Hcta));
    }

    private async Task OnHueUpdate(double tone)
    {
        Hcta.H = tone;
        await UpdateHCTA();
    }
    
    private async Task OnChromaUpdate(double chroma)
    {
        Hcta.C = chroma;
        await UpdateHCTA();
    }
    
    private async Task OnToneUpdate(double tone)
    {
        Hcta.T = tone;
        await UpdateHCTA();
    }

    private async void OnThemeUpdate()
    {
        if (ScopedSettings.DynamicTheme)
        {
            Hcta = ThemeContainer.Theme.Origin ?? ThemeContainer.Theme.Primary;
            if (OnHCTUpdate is not null) await OnHCTUpdate();
        }
        StateHasChanged();
    }
    
    protected override void OnInitialized()
    {
        ThemeContainer.OnThemeUpdate += OnThemeUpdate;
        Hcta = ThemeContainer.Theme.Origin ?? ThemeContainer.Theme.Primary;
    }

    public void Dispose()
    {
        ThemeContainer.OnThemeUpdate -= OnThemeUpdate;
    }
}