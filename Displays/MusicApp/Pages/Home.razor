@using MusicApp.Layouts
@using MaterialDesign.Theming.Injection
@page "/"
@inject SongInfo SongInfo
@inject ThemeContainer ThemeContainer

<DynamicHeadContent>
    <link rel="stylesheet" href="css/Home.css">
</DynamicHeadContent>

<PageTitle>Home</PageTitle>

<DynamicComponentContent OutletId="@AppLayout.TopId">
    <MdIcon Icon="@GetIconString()" id="ThemeSwitch" @onclick="@SwitchTheme"/>
</DynamicComponentContent>
<DynamicComponentContent OutletId="@AppLayout.LeftId">
    @if (SongPlaying)
    {
        <img src="@SongInfo.AlbumCoverUrl" alt="@SongInfo.Album" id="PlayingAlbumCover"/>
    }
</DynamicComponentContent>
<DynamicComponentContent OutletId="@AppLayout.BottomId">
    <p>bottom</p>
</DynamicComponentContent>

<p>main</p>

@code {
    private bool SongPlaying => SongInfo != SongInfo.Empty;
    
    private string GetIconString() => (ThemeContainer.Theme.IsDarkScheme ? "Dark" : "Light") + " Mode";

    private void SwitchTheme()
    {
        if (ThemeContainer.Theme.IsDarkScheme) ThemeContainer.Theme.SetLight();
        else ThemeContainer.Theme.SetDark();

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        ThemeContainer.OnThemeUpdate += async () => await InvokeAsync(StateHasChanged);
    }

}