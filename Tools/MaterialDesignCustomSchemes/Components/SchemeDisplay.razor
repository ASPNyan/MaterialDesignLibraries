@using System.Text.Json
@using MaterialDesign.Color.Schemes.Custom
@using MaterialDesign.Theming

<div class="SchemeWrapper">
    
<div class="Scheme">
    <span>@(Scheme.IsDarkScheme ? "Dark" : "Light") Scheme</span>
    <div class="SchemeGrid">
        <div class="PrimaryPalette Core" style="background: @Scheme.Primary.ToRGBA().ToString();
color: @Scheme.OnPrimary.ToRGBA().ToString()">
            Primary
        </div>
        <div class="PrimaryPalette OnCore" style="background: @Scheme.OnPrimary.ToRGBA().ToString();
color: @Scheme.Primary.ToRGBA().ToString()">
            On Primary
        </div>
        <div class="PrimaryPalette Container" style="background: @Scheme.PrimaryContainer.ToRGBA().ToString();
color: @Scheme.OnPrimaryContainer.ToRGBA().ToString()">
            Primary Container
        </div>
        <div class="PrimaryPalette OnContainer" style="background: @Scheme.OnPrimaryContainer.ToRGBA().ToString();
color: @Scheme.PrimaryContainer.ToRGBA().ToString()">
            On Primary Container
        </div>

        <div class="SecondaryPalette Core" style="background: @Scheme.Secondary.ToRGBA().ToString();
color: @Scheme.OnSecondary.ToRGBA().ToString()">
            Secondary
        </div>
        <div class="SecondaryPalette OnCore" style="background: @Scheme.OnSecondary.ToRGBA().ToString();
color: @Scheme.Secondary.ToRGBA().ToString()">
            On Secondary
        </div>
        <div class="SecondaryPalette Container" style="background: @Scheme.SecondaryContainer.ToRGBA().ToString();
color: @Scheme.OnSecondaryContainer.ToRGBA().ToString()">
            Secondary Container
        </div>
        <div class="SecondaryPalette OnContainer" style="background: @Scheme.OnSecondaryContainer.ToRGBA().ToString();
color: @Scheme.SecondaryContainer.ToRGBA().ToString()">
            On Secondary Container
        </div>

        <div class="TertiaryPalette Core" style="background: @Scheme.Tertiary.ToRGBA().ToString();
color: @Scheme.OnTertiary.ToRGBA().ToString()">
            Tertiary
        </div>
        <div class="TertiaryPalette OnCore" style="background: @Scheme.OnTertiary.ToRGBA().ToString();
color: @Scheme.Tertiary.ToRGBA().ToString()">
            On Tertiary
        </div>
        <div class="TertiaryPalette Container" style="background: @Scheme.TertiaryContainer.ToRGBA().ToString();
color: @Scheme.OnTertiaryContainer.ToRGBA().ToString()">
            Tertiary Container
        </div>
        <div class="TertiaryPalette OnContainer" style="background: @Scheme.OnTertiaryContainer.ToRGBA().ToString();
color: @Scheme.TertiaryContainer.ToRGBA().ToString()">
            On Tertiary Container
        </div>

        <div class="ErrorPalette Core" style="background: @(((IScheme)Scheme).Error.ToRGBA().ToString());
color: @(((IScheme)Scheme).OnError.ToRGBA().ToString())">
            Error
        </div>
        <div class="ErrorPalette OnCore" style="background: @(((IScheme)Scheme).OnError.ToRGBA().ToString());
color: @(((IScheme)Scheme).Error.ToRGBA().ToString())">
            On Error
        </div>
        <div class="ErrorPalette Container" style="background: @(((IScheme)Scheme).ErrorContainer.ToRGBA().ToString());
color: @(((IScheme)Scheme).OnErrorContainer.ToRGBA().ToString())">
            Error Container
        </div>
        <div class="ErrorPalette OnContainer" style="background: @(((IScheme)Scheme).OnErrorContainer.ToRGBA().ToString());
color: @(((IScheme)Scheme).ErrorContainer.ToRGBA().ToString())">
            On Error Container
        </div>

        <div class="NeutralPalette Core" style="background: @Scheme.Background.ToRGBA().ToString();
color: @Scheme.OnBackground.ToRGBA().ToString()">
            Background
        </div>
        <div class="NeutralPalette OnCore" style="background: @Scheme.OnBackground.ToRGBA().ToString();
color: @Scheme.Background.ToRGBA().ToString()">
            On Background
        </div>
        <div class="NeutralPalette Container" style="background: @Scheme.Surface.ToRGBA().ToString();
color: @Scheme.OnSurface.ToRGBA().ToString()">
            Surface
        </div>
        <div class="NeutralPalette OnContainer" style="background: @Scheme.OnSurface.ToRGBA().ToString();
color: @Scheme.Surface.ToRGBA().ToString()">
            On Surface
        </div>

        <div class="NeutralVariantPalette Outline" style="background: @Scheme.Outline.ToRGBA().ToString();
color: white">
            Outline
        </div>
        <div class="NeutralVariantPalette Container" style="background: @Scheme.SurfaceVariant.ToRGBA().ToString();
color: @Scheme.OnSurfaceVariant.ToRGBA().ToString()">
            Surface Variant
        </div>
        <div class="NeutralVariantPalette OnContainer" style="background: @Scheme.OnSurfaceVariant.ToRGBA().ToString();
color: @Scheme.SurfaceVariant.ToRGBA().ToString()">
            On Surface Variant
        </div>
    </div>
</div>
</div>

@code {
    [Parameter, EditorRequired]
    public CustomSchemeBase Scheme { get; set; } = null!;

    protected override void OnInitialized()
    {
        Scheme.OnUpdate += OnUpdate;
    }

    private async void OnUpdate() => await InvokeAsync(StateHasChanged);
}
