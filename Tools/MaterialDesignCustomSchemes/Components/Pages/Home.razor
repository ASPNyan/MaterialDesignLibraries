@using MaterialDesign.Theming.Web
@using MudBlazor
@using static MaterialDesign.Color.Schemes.Custom.CustomSchemeBase
@using MaterialDesign.Color.Schemes.Custom
@page "/"
@rendermode InteractiveServer
@inject ModifiableCustomScheme Scheme

<PageTitle>Home</PageTitle>

<DynamicHeadContent>
    <link rel="stylesheet" href="Home.css">
</DynamicHeadContent>

<article id="Settings">
    <HCTSelector Hue="@Scheme.Hue" Chroma="@Scheme.Chroma" Tone="@Scheme.Tone" SelectorId="ColorSelector">
        <HSlider>
            <MudSlider T="double" Min="0" Max="359" Value="@Scheme.Hue" ValueChanged="@OnHueUpdate" Class="HueSlider Slider"
                       ValueLabel="true" Size="@Size.Medium"/>
        </HSlider>
        <CSlider>
            <MudSlider T="double" Min="0" Max="150" Value="@Scheme.Chroma" ValueChanged="@OnChromaUpdate" Class="ChromaSlider Slider"
                       ValueLabel="true" Size="@Size.Medium" Variant="@Variant.Filled"/>
        </CSlider>
        <TSlider>
            <MudSlider T="double" Min="0" Max="100" Value="@Scheme.Tone" ValueChanged="@OnToneUpdate" Class="ToneSlider Slider"
                       ValueLabel="true" Size="@Size.Medium" Variant="@Variant.Filled"/>
        </TSlider>
    </HCTSelector>
    
    <MdIcon Icon="@GetThemeIconString()" id="DarkLightSwitch" class="on-tertiary tertiary-text" @onclick="@SwitchTheme"/>

    <h2>Scheme Options</h2>
    <p>Scheme Text Style</p>
    <MudSelect T="TextStyleType" Value="Scheme.SchemeTextStyle" ValueChanged="type => SetAndUpdate(() => Scheme.SchemeTextStyle = type)"
               Class="SettingSelector" PopoverClass="SettingPopover">
        @foreach (var value in Enum.GetValues<TextStyleType>())
        {
            <MudSelectItem T="TextStyleType" Value="@value">@GetFormattedEnumValueString(value)</MudSelectItem>
        }
    </MudSelect>
    <br/><br/>

    <p>Scheme Saturation</p>
    <MudSelect T="SaturationType" Value="Scheme.SchemeSaturation" ValueChanged="type => SetAndUpdate(() => Scheme.SchemeSaturation = type)"
               Class="SettingSelector" PopoverClass="SettingPopover">
        @foreach (var value in Enum.GetValues<SaturationType>()) {
            <MudSelectItem T="SaturationType" Value="@value">@GetFormattedEnumValueString(value)</MudSelectItem>
        }
    </MudSelect>
    <br/><br/>

    <p>Scheme Dark/Light Gap</p>
    <MudSelect T="ToneGap" Value="Scheme.SchemeDarkLightGap" ValueChanged="type => SetAndUpdate(() => Scheme.SchemeDarkLightGap = type)"
               Class="SettingSelector" PopoverClass="SettingPopover">
        @foreach (var value in Enum.GetValues<ToneGap>()) {
            <MudSelectItem T="ToneGap" Value="@value">@GetFormattedEnumValueString(value)</MudSelectItem>
        }
    </MudSelect>
    <br/><br/>

    <p>Scheme On Color Gap</p>
    <MudSelect T="ToneGap" Value="Scheme.SchemeOnColorGap" ValueChanged="type => SetAndUpdate(() => Scheme.SchemeOnColorGap = type)"
               Class="SettingSelector" PopoverClass="SettingPopover">
        @foreach (var value in Enum.GetValues<ToneGap>()) {
            <MudSelectItem T="ToneGap" Value="@value">@GetFormattedEnumValueString(value)</MudSelectItem>
        }
    </MudSelect>
    <br/><br/>

    <p>Scheme Core/Container Gap</p>
    <MudSelect T="ToneGap" Value="Scheme.SchemeCoreContainerGap" ValueChanged="type => SetAndUpdate(() => Scheme.SchemeCoreContainerGap = type)"
               Class="SettingSelector" PopoverClass="SettingPopover">
        @foreach (var value in Enum.GetValues<ToneGap>()) {
            <MudSelectItem T="ToneGap" Value="@value">@GetFormattedEnumValueString(value)</MudSelectItem>
        }
    </MudSelect>
    <br/><br/>

    <p>Scheme Primary Difference</p>
    <MudSelect T="string" MultiSelection="true" MultiSelectionTextFunc="@GetMultiSelectFlags" PopoverClass="SettingPopover"
               SelectedValuesChanged="@(flags => UpdateFlags(x => Scheme.SchemePrimaryDifference = x, flags))" Class="SettingSelector"
               SelectedValues="@GetSelectedValues(Scheme.SchemePrimaryDifference)">
        @foreach (var flag in Enum.GetValues<DifferenceFromSource>())
        {
            <MudSelectItem T="string" Value="@GetFormattedEnumValueString(flag)"/>
        }
    </MudSelect>
    @if ((Scheme.SchemePrimaryDifference & DifferenceFromSource.UseHueOverride) != 0)
    {
        <MudInput T="double" Value="Scheme.SchemePrimaryHue" ValueChanged="@(x => SetAndUpdate(() => Scheme.SchemePrimaryHue = x))"
                  Placeholder="Primary Hue" Class="SettingSelector"/>
    }
    @if ((Scheme.SchemePrimaryDifference & DifferenceFromSource.UseChromaOverride) != 0)
    {
        <MudInput T="double" Value="Scheme.SchemePrimaryChroma" ValueChanged="@(x => SetAndUpdate(() => Scheme.SchemePrimaryChroma = x))"
                  Placeholder="Primary Hue" Class="SettingSelector"/>
    }
    <br/><br/>

    <p>Scheme Secondary Difference</p>
    <MudSelect T="string" MultiSelection="true" MultiSelectionTextFunc="@GetMultiSelectFlags" PopoverClass="SettingPopover"
               SelectedValuesChanged="@(flags => UpdateFlags(x => Scheme.SchemeSecondaryDifference = x, flags))" Class="SettingSelector" 
               SelectedValues="@GetSelectedValues(Scheme.SchemeSecondaryDifference)">
        @foreach (var flag in Enum.GetValues<DifferenceFromSource>())
        {
            <MudSelectItem T="string" Value="@GetFormattedEnumValueString(flag)"/>
        }
    </MudSelect>
    @if ((Scheme.SchemeSecondaryDifference & DifferenceFromSource.UseHueOverride) != 0)
    {
        <MudInput T="double" Value="Scheme.SchemeSecondaryHue" ValueChanged="@(x => SetAndUpdate(() => Scheme.SchemeSecondaryHue = x))"
                  Placeholder="Secondary Hue" Class="SettingSelector"/>
    }
    @if ((Scheme.SchemeSecondaryDifference & DifferenceFromSource.UseChromaOverride) != 0)
    {
        <MudInput T="double" Value="Scheme.SchemeSecondaryChroma" ValueChanged="@(x => SetAndUpdate(() => Scheme.SchemeSecondaryChroma = x))"
                  Placeholder="Secondary Chroma" Class="SettingSelector"/>
    }
    <br/><br/>

    <p>Scheme Tertiary Difference</p>
    <MudSelect T="string" MultiSelection="true" MultiSelectionTextFunc="@GetMultiSelectFlags" PopoverClass="SettingPopover"
               SelectedValuesChanged="@(flags => UpdateFlags(x => Scheme.SchemeTertiaryDifference = x, flags))" Class="SettingSelector" 
               SelectedValues="@GetSelectedValues(Scheme.SchemeTertiaryDifference)">
        @foreach (var flag in Enum.GetValues<DifferenceFromSource>())
        {
            <MudSelectItem T="string" Value="@GetFormattedEnumValueString(flag)"/>
        }
    </MudSelect>
    @if ((Scheme.SchemeTertiaryDifference & DifferenceFromSource.UseHueOverride) != 0)
    {
        <MudInput T="double" Value="Scheme.SchemeTertiaryHue" ValueChanged="@(x => SetAndUpdate(() => Scheme.SchemeTertiaryHue = x))"
                  Placeholder="Tertiary Hue" Class="SettingSelector"/>
    }
    @if ((Scheme.SchemeTertiaryDifference & DifferenceFromSource.UseChromaOverride) != 0)
    {
        <MudInput T="double" Value="Scheme.SchemeTertiaryChroma" ValueChanged="@(x => SetAndUpdate(() => Scheme.SchemeTertiaryChroma = x))"
                  Placeholder="Tertiary Chroma" Class="SettingSelector"/>
    }
    <br/><br/>

    <p>Scheme Surface Difference</p>
    <MudSelect T="string" MultiSelection="true" MultiSelectionTextFunc="@GetMultiSelectFlags" PopoverClass="SettingPopover"
               SelectedValuesChanged="@(flags => UpdateFlags(x => Scheme.SchemeSurfaceDifference = x, flags))" Class="SettingSelector" 
               SelectedValues="@GetSelectedValues(Scheme.SchemeSurfaceDifference)">
        @foreach (var flag in Enum.GetValues<DifferenceFromSource>())
        {
            <MudSelectItem T="string" Value="@GetFormattedEnumValueString(flag)"/>
        }
    </MudSelect>
    @if ((Scheme.SchemeSurfaceDifference & DifferenceFromSource.UseHueOverride) != 0)
    {
        <MudInput T="double" Value="Scheme.SchemeSurfaceHue" ValueChanged="@(x => SetAndUpdate(() => Scheme.SchemeSurfaceHue = x))"
                  Placeholder="Surface Hue" Class="SettingSelector"/>
    }
    @if ((Scheme.SchemeSurfaceDifference & DifferenceFromSource.UseChromaOverride) != 0)
    {
        <MudInput T="double" Value="Scheme.SchemeSurfaceChroma" ValueChanged="@(x => SetAndUpdate(() => Scheme.SchemeSurfaceChroma = x))"
                  Placeholder="Surface Chroma" Class="SettingSelector"/>
    }
    <br/><br/>
    
    <p>Scheme Variant Difference From Surface</p>
    <MudSelect T="SaturationType" Value="Scheme.SchemeVariantDifferenceFromSurface" Class="SettingSelector" PopoverClass="SettingPopover"
               ValueChanged="type => SetAndUpdate(() => Scheme.SchemeVariantDifferenceFromSurface = type)">
        @foreach (var value in Enum.GetValues<SaturationType>()) {
            <MudSelectItem T="SaturationType" Value="@value">@GetFormattedEnumValueString(value)</MudSelectItem>
        }
    </MudSelect>
</article>

<article id="Content">
    <SchemeDisplay Scheme="@Scheme" @rendermode="InteractiveServer"/>

    <article id="Example" style="background: @HCTAString(Scheme.Background); color: @HCTAString(Scheme.GetText(Scheme.OnPrimary))">
        <span style="background: @HCTAString(Scheme.TertiaryContainer); color: @HCTAString(Scheme.GetText(Scheme.OnTertiaryContainer)); border: 3px solid @HCTAString(Scheme.Outline)">
            Lorem ipsum dolor sit amet, consectetur adipisicing elit.
            A dolorum eligendi eveniet inventore itaque nobis quidem repellat sequi sit voluptatibus!
        </span>

        Lorem ipsum dolor sit amet, consectetur adipisicing elit.
        Culpa, dolore eligendi ipsum iusto mollitia natus numquam odio officiis optio
        perferendis perspiciatis quaerat quos repellendus repudiandae sint tempora tempore voluptatem voluptates.

        <div style="background: @HCTAString(Scheme.OnPrimary); color: @HCTAString(Scheme.GetText(Scheme.Primary)); border: 3px solid @HCTAString(Scheme.Outline)">
            <span style="background: @HCTAString(Scheme.Secondary); color: @HCTAString(Scheme.GetText(Scheme.OnSecondary));">
                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid, praesentium!
            </span>

            Lorem ipsum dolor sit amet, consectetur adipisicing elit.
            Explicabo, laboriosam necessitatibus nemo odit qui tenetur vero voluptatibus.
            A accusamus, assumenda distinctio dolore eos eveniet fuga maiores nemo nihil,
            non pariatur placeat quibusdam sunt tempore vel, veniam vitae.
            Adolores eos excepturi id maxime neque, voluptate! Aliquid deserunt dolorem dolorum unde.
            <br/><br/>
            Lorem ipsum dolor sit amet, consectetur adipisicing elit.
            Alias consectetur, ducimus enim in iure maiores nam necessitatibus omnis perferendis quae.
        </div>
    </article>
</article>

@code {
    private static string HCTAString(HCTA hcta) => hcta.ToRGBA().ToString();

    private static string GetFormattedEnumValueString<T>(T value) where T : struct
    {
        string stringVal = value.ToString() ?? throw new ArgumentNullException(nameof(value), "The provided enum value may not be null");
        string output = stringVal.Aggregate(string.Empty, (current, c) => current + (char.IsUpper(c) ? $" {c}" : c));

        return output;
    }
    
    private void OnHueUpdate(double hue)
    {
        Scheme.Hue = hue;
        StateHasChanged();
    }
    
    private void OnChromaUpdate(double chroma)
    {
        Scheme.Chroma = chroma;
        StateHasChanged();
    }
    
    private void OnToneUpdate(double tone)
    {
        Scheme.Tone = tone;
        StateHasChanged();
    }
    
    private void SetAndUpdate(Action assignment)
    {
        assignment();
        StateHasChanged();
    }
    
    private void UpdateFlags(Action<DifferenceFromSource> assignmentFunc, IEnumerable<string> flags)
    {
        string[] flagsArray = flags.ToArray();
        
        if (flagsArray.Length is 0 || flagsArray.Last() == GetFormattedEnumValueString(DifferenceFromSource.None))
        {
            assignmentFunc(DifferenceFromSource.None);
        }
        else
        {
            int flagInt = flagsArray.Aggregate(0, 
                (current, flag) => current | (int)Enum.Parse<DifferenceFromSource>(flag.Replace(" ", "")));
        
            assignmentFunc((DifferenceFromSource)flagInt);
        }
        
        StateHasChanged();
    }

    private static string GetMultiSelectFlags(IEnumerable<string> flags)
    {
        string[] flagsArray = flags as string[] ?? flags.ToArray();
        int count = flagsArray.Length;
        return count is 0 || flagsArray[0] == GetFormattedEnumValueString(DifferenceFromSource.None)
            ? "0 Flags Selected." 
            : $"{count} Flag{(count is 1 ? "" : "s")} Selected.";
    }

    private string GetThemeIconString() => Scheme.IsDarkScheme ? "dark_mode" : "light_mode";

    private void SwitchTheme()
    {
        if (Scheme.IsDarkScheme) Scheme.SetLight();
        else Scheme.SetDark();
    }

    private static IEnumerable<string> GetSelectedValues(DifferenceFromSource flags)
    {
        if (flags is DifferenceFromSource.None) return [GetFormattedEnumValueString(DifferenceFromSource.None)];
        return Enum.GetValues<DifferenceFromSource>().Where(flag => (flags & flag) != 0).Select(GetFormattedEnumValueString);
    }
}